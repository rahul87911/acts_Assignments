package pen_project;

import java.time.LocalDate;
import java.time.temporal.ChronoUnit;
import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;

public class PenTester {

	public static void main(String[] args) {
		
		Map<Integer,PenAccount> stockList = new HashMap<>();
		
		PenAccount s = new PenAccount("cello", "black", "blue", Material.METAL, 200, 40, 0.0,2);
		stockList.put(s.getId(),s);
		PenAccount s2 = new PenAccount("link", "black", "blue", Material.STEEL, 400, 60, 0.0,3);
		stockList.put(s2.getId(),s2);
		PenAccount s3 = new PenAccount("link", "black", "blue", Material.STEEL, 400, 60, 0.0,5);
		stockList.put(s3.getId(),s3);
		
		
		boolean exit = false;
		Scanner sc = new Scanner(System.in);
		
		while(!exit)
		{
			try {
				System.out.println("Enter 1 for adding pen stock");
				System.out.println("Enter 2 for displaying the penStock");
				System.out.println("Enter 3 for updating the penstock");
				System.out.println("Enter 4 for setting discount of 20% for all the pens which are not at all sold in last 3 months");
				System.out.println("Enter 5 for removing pens which are never sold once listed in 9 months");
				System.out.println("Enter 6 for Exit");
				
				
				switch(sc.nextInt())
				{
				
				case 1:
					PenAccount p= Validation.validateAll(sc.next(),sc.next(),sc.next(),sc.next(),sc.nextInt(),sc.nextDouble(),sc.nextDouble(),sc.nextInt());
					stockList.put(p.getId() ,p);
					System.out.println("Pen Stock added succesfully");
				    
					break;
					
				case 2:
					stockList.values().stream().forEach(pr->System.out.println(pr));
					
					break;
					
				case 3:
				     System.out.println("Enter Id of the pen:");
				     PenAccount find=FindMyAccount.findPen(sc.nextInt(),stockList);
				     System.out.println("Enter new  Brand, Material, Color, Ink color, Quantity");
				     String nBrand=sc.next();
				     Material nMaterial=Validation.validateMaterial(sc.next());
				     String nColor=sc.next();
				     String nInk=sc.next();
				     int nQuant=sc.nextInt();
				     
				     find.setBrand(nBrand);
				     find.setMaterialType(nMaterial);
				     find.setColor(nColor);
				     find.setInkcolor(nInk);
				     find.setQuantity(nQuant);
				     find.setUpdateDate(LocalDate.now());
				     
				     System.out.println("Stock Updated !!");
				     
				     break;
				     
				case 4:
					LocalDate expired=LocalDate.now().minus(3,ChronoUnit.MONTHS);
					
					for(PenAccount a:stockList.values()) {
						if(a.getListingDate().isBefore(expired)) {
							a.setDiscount(20);
							double nPrice=a.getPrice()-a.getPrice()*0.2;
							a.setPrice(nPrice);
						}
					}
					
					break;
					
				case 5:
                    LocalDate expired2=LocalDate.now().minus(9,ChronoUnit.MONTHS);
					
					for(PenAccount a:stockList.values()) {
						if(a.getListingDate().isBefore(expired2)) {
							stockList.remove(a.getId(),a);
						}
					}
					
					break;
					
				case 6:
					exit=true;
					System.out.println("Exiting Application...");
	
				}
				
				
				
			}
			catch(Exception e)
			{
				System.out.println(e);
			}
		}

	}

}
